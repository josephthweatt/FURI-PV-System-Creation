
public class BestCaseOutput {
	static short day;
	static String[] sunriseSchedule, sunsetSchedule;
	
	//variables used for sunrise/sunset
	static double locationLatitude;
	static double declination;
	
	public static void main(String[] args) {
		day = 1;
		sunriseSchedule = new String[365];
		sunsetSchedule = new String[365];
		locationLatitude = 22; //in degrees
		float acosValue;
		double acosInsert;
		//this here gets the schedules for sunrises and sunsets
		for (int i = 0; i < 365; i++, day++) {
			declination = getDeclinationAngle();
			double a = -Math.sin(Math.toRadians(locationLatitude)) * Math.sin(declination);
			double b = (Math.cos(Math.toRadians(locationLatitude)) * Math.cos(declination));
			acosInsert = -Math.sin(Math.toRadians(locationLatitude)) * Math.sin(declination)
					/ (Math.cos(Math.toRadians(locationLatitude)) * Math.cos(declination));
			acosValue = (float) Math.toDegrees(Math.acos(acosInsert)) / 15;
			sunriseSchedule[i] = toDisplayTime(12 - acosValue);
			sunsetSchedule[i] = toDisplayTime(12 + acosValue);
			
			System.out.printf(sunriseSchedule[i] + " || " + sunsetSchedule[i] + "\n");
		}
		
	}
	
	//returns declination angle for a given day (in radians)
	public static double getDeclinationAngle() {
		double a = 23.45;
		double b = (Math.PI / 180);
		double c = (284 + day) / 36.25;
		double d = Math.sin(Math.toRadians(2*Math.PI*(c))); //might not need toRadians
		return a * b * d;
	}

	//returns displayable time for indexing
	public static String toDisplayTime(double time) {
		String hours, minutes;
		if (time < 12) {
			hours = String.valueOf((int) time + 1);
			minutes = String.valueOf((int) (time % ((int) time) * 60));
		} else {
			hours = String.valueOf((int) time - 1);
			minutes = String.valueOf((int) ((time % (int) time) * 60));
		}
		return hours + ":" + minutes;
	}
	
}
